#ifndef __PATHFINDER__
#define __PATHFINDER__

#include "MapModule.nxc"

#define max(v1, v2) { if( v1 >= v2 ) return v1; else return v2; }

void PathFinder_annotateMap(byte target)
{
     for(int y = 0; y < GLOBAL_MAP_HEIGHT; y++)
     {
             for(int x = 0; x < GLOBAL_MAP_WIDTH; x++)
             {
                     if(g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x] == target) g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x] = 'z';
             }
     }
     
     bool everything_done = false;
     
     while(!everything_done)
     {
             everything_done = true;
             for(int y = 0; y < GLOBAL_MAP_HEIGHT; y++)
             {
                     for(int x = 0; x < GLOBAL_MAP_WIDTH; x++)
                     {
                             if(g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x] == ' ')
                             {
                                  everything_done = false;
                                  byte left = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x - 1];
                                  byte right = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x + 1];
                                  byte above = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * (y - 1) + x];
                                  byte below = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * (y + 1) + x];
                             }
                             
                             unsigned int avg = 0;
                             unsigned int count = 0;
                     
                             if(left>= 'a' && left <= 'z')
						                 {
						                 	         count++; avg += left;
                             }
						                 if(right>= 'a' && right <= 'z')
						                 {
							                          count++; avg += right;
                             }
						                 if(above>= 'a' && above <= 'z')
						                 {
							                          count++; avg += above;
                    	       }
						                 if(below>= 'a' && below <= 'z')
						                 {
							                          count++; avg += below;
                             }
                             if(count > 0)
						                 {
						                 	          avg = avg / count;
							                          if ((byte)avg < 'b') {avg = 'b';}
							                          g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x] = (byte)(--avg);
                             }
                     }
             }
     
     }
}

void PathFinder_searchWay
{
     unsigned int x_Pos, y_Pos;
		 for(unsigned int y = 0; y < GLOBAL_MAP_HEIGHT; y++)
     {
			     for(unsigned int x = 0; x < GLOBAL_MAP_WIDTH; x++)
           {
				         if(g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y + x] == 'S') {x_Pos = x; y_Pos = y;};
           }
		 }
		 
		 byte searching = true;
		 unsigned int steps = 0;
		 
		 while(searching)
		 {
            byte left = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y_Pos + x_Pos - 1];
            byte right = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y_Pos + x_Pos + 1];
            byte above = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * (y_Pos - 1) + x_Pos];
            byte below = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * (y_Pos + 1) + x_Pos];
		 }
		 
     byte maxValue = max( max( left, right ), max( above , below ));
     
     if(maxValue == left)
     {
            while(true)
            {
                  byte current = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y_Pos + x_Pos];
                  byte next = g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y_Pos + x_Pos + 1];
                  if(current == 'z') searching = false;
                  
                  if(current >= next || next == '#')
                  {
                       // some output could be here
                       steps = 0;
                       break;
                  }
                  else
                  {
                       g_MapModule_Workfield.map[GLOBAL_MAP_WIDTH * y_Pos + x_Pos] = 'X';
                       x_Pos++;
                       steps++;
                  }

            }
}

#endif
