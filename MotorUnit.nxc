#ifndef ___MOTORMODULE___
#define ___MOTORMODULE___

/*******************************
 * MotorModule
 * 
 * author: Florian Laufenböck
 * *****************************/



/*******************************
 * Information:
 *******************************/
 // to start the MototModule call only  MU_start_all_features() ! 
 // der Fehler bei der Fahrt beträgt bei gefahrenen 2000° ca. 2°
 // -> immer aufrunden oder immer abrunden?
/*******************************
 * Beispielkarte der Umgebung:
 * 
     0123456789ABCD
	0##############
	1#	  S	      #	
	2##   #####   #	
	3#	  11 	  #
	4#			  #
	5#   ####    2#
	6#	    #    2#
	7#	    #     #
	8#   ##########
	9#   #        #
	A#   #   33   #
	B#   #        #
	C#            #
	D##############
	------------->x - koordinate
    und von up to down ist y-koordinate
    -> S = 5/1
    außerdem gilt: der Startwinkel ist entlang der positiven y achse, sodass beim Start vom Roboter aus vorne 0° sind
    * 
    * 
    **************************/



/*******************************
 * Includes
 *******************************/
// needs the SensorModule, because of the compass
#include "SensorModule.nxc"
#include "TimersAndEvents.nxc"


/*******************************
 * Declaration
 *******************************/

/* struct _MU_data
 * 
 * unsigned int MU_x_pos:	liefert die aktuelle x-position des Fahrzeugs allein aufgrund der Odometrie zurück
 * unsigned int MU_y_pos: 	liefert die aktuelle y-position des Fahrzeugs allein aufgrund der Odometrie zurück
 * unsigned int MU_angle:	liefert den Winkel zurück, in dem das Fahrzeug im Raum steht, zurück
 * 
 * short MU_sin_angle:		liefert den Winkel zurück, der zwischen der Gerade, die die Startposition mit der aktuellen Position verbindet, und der y-Achse zurück
 * float MU_distance:		liefert den abstand(luftlinie) zum Start zurück; benutzt dafür x-pos, y-pos 
 */
struct _MU_data
{
	unsigned int MU_x_pos;
	unsigned int MU_y_pos;
	unsigned int MU_angle;
	
	short MU_sin_angle;
	float MU_distance;	
};

bool global_someth_exist;	// globale Variable für die Tatsache, ob ein Getränk vorhanden ist
unsigned int global_Dig0;	// das ist der winkel, der "0" ist, also der 0 winkel von dem ich alles brauche, wichtig: NUR BEIM START INITIAL BELEGEN

/* function: MU_drive_forward
 * gets: weg in cm der zurückgelegt werden muss
 * fährt den Weg in cm ab, fährt nur geradeaus, sodass keine komplexen Bewegungen entstehen
 * hat einen special_mode mit dem ich einfach so lange fahren kann, wie ich will (bzw. Event wird geworfen...)
 * liefert false zurück, wenn iwas schiefgegangen ist(hinderniss, lange keine signal, bin auf farbe gesstossen)
 * schmeißt am Ende der Ausführung ein Event, sodass der Tachometer gelöscht werden kann
 */
bool MU_drive_forward(const short &cm, bool special_test = false);

/* functin: MU_drive_backward
 * gets: weg in cm, der zurückgelegt werden soll
 * fährt den weg rückwärts ab, keine komplexen Bewegungen
 * hat einen special_mode mit dem ich einfach so lange fahren kann, wie ich will (bzw. Event wird geworfen...)
 * ruft einfach nur MU_drive_forward mit negativen Wert auf
 *  liefert false zurück, wenn iwas schiefgegangen ist(hinderniss, lange keine signal, bin auf farbe gesstossen)
 * schmeißt am Ende der Ausführung ein Event, sodass der Tachometer gelöscht werden kann
 */ 
bool MU_drive_backward(const short &cm, bool special_test = false);

/* function: MU_drehen_by_angle
 * gets: den Winkel den er sich drehen soll(positiv oder negativ)
 * 											wobei: positiv = in Uhrzeigersinnn, negativ = gegen Uhrzeigersinn
 * dreht sich um den Winkel um die eigene Achse, sodass der Mittelpunkt des Robos immer gleich ist
 *  liefert false zurück, wenn iwas schiefgegangen ist(hinderniss, lange keine signal, bin auf farbe gesstossen)
 * nach fertigem drehen wird der Tachocounter gelöscht!!!!
 */
bool MU_drehen_by_angle(const short &angle);

/* function: MU_drehen_by_degree
 * hier geht es darum,dass das Fahrzeug sich in einen bestimmten Winkel abhängig vom Kompass dreht
 * der Kompasswinkel sei 0, wenn das Fahrzeug in richtung positiver x-Richtung schaut
 * er entwickelt sich in richtung uhrzeigersinn
 */
bool MU_drehen_by_degree(const short &degree);

/*function: MU_start_all_featurs
 * kriegt keine Variablen
 * testet ob beide Motoren in A und C eingesteckt sind
 * startet den Task MU_informations
 * liefert false zurück, sollte iwas nicht wie gewünscht laufen
 */
bool MU_start_all_features();

/* Task: MU_informations
 * wird einmal initial gestartet
 * legt die Daten der Odometrie einmal inital an und verwaltet diese
 * läuft in einer Endlosschleife
 */
task MU_informations();


/******************************
 * Defines:
 ******************************/
#define MU_GLOBAL_X_0	6
#define MU_GLOBLAL_Y_0	1
#define MU_GLOBAL_ANGLE_0	0	// veränderbar, wenn der Roboter inital einmal hingestellt wurde
#define GLOBAL_1_SEKTOR 25	// definition wie groß ein Sektor im Raum ist
#define MU_GLOBAL_ANGLE_MOTOR 360	// Winkel, damit sich das Rad einmal dreht
#define MU_GLOBAL_UMFANG 13.5	// umfang des Rades
#define MU_GLOBAL_DRIVE1 (MU_GLOBAL_ANGLE_MOTOR / MU_GLOBAL_UMFANG) 	// Winkel um einen cm zurückzulegen
#define MU_GLOBAL_WHEEL	(MU_GLOBAL_DRIVE1 * GLOBAL_1_SEKTOR)	// Winkel um 25cm zurückzulegen
#define MU_GLOBAL_MAXSPEED 60
#define MU_GLOBAL_DEGREE_ONESTEP 50		// gibt die Grad an, die ich bei einer Umdrehung fahren will
#define GLOBAL_MOTOR1 OUT_A
#define GLOBAL_MOTOR2 OUT_C
#define GLOBAL_MOTOR12 OUT_AC
#define MU_GLOBAL_STOPandGO 400		// fester Wert, den das Fahrzeug fürs Beschleunigen und Bremsen braucht
#define MU_lokal_Beschleunigung (MU_GLOBAL_STOPandGO / MU_GLOBAL_DEGREE_ONESTEP);
#define MU_GLOBAL_FEHLERKORREKTUR	//TODO: winkel einfügen, den ich mit einem motor fahren muss, damit ich einen grad vom kompass ausgleichen kann

/******************************
 * Debugs
 * using LCD_LINE 1 and 2
 ******************************/
 #define MU_debug	// debug klausel
 #define MU_feedback	// klausel, die bestimmt, wann feedback vom Robo nach außen gegeben wird


/*******************************
 * Timer and Events for the Motormodule	
 ******************************/
#define GLOBAL_EVENT_MU_READING 0x80	// sollte dieses Event gesetzt sein, dann dürfen Informationen ausgelesen werden, ist nur der Fall, wenn man geradeaus oder Rückwärts fährt


/*******************************
 * Initialisation
 ******************************/
_MU_data MU_data_info;

	
/*******************************
 *Functions and tasks
 *******************************/

bool MU_drehen_by_degree(const short &degree)
{
	short difference = global_Dig0 - SU_Values.iCurrentDeg;	// erstmal die differenz auslesen, die mir fehlt
	RotateMotorEx(GLOBAL_MOTOR12,10,(difference * MU_GLOBAL_FEHLERKORREKTUR),100,false,false);
	ResetRotationCount(GLOBAL_MOTOR12);
}

bool MU_drehen_by_angle(const short &angle)
{
	RotateMotorEx(GLOBAL_MOTOR12,10,angle,100,false,false);
	ResetRotationCount(GLOBAL_MOTOR12);
}

bool MU_drive_backward(const short &cm, bool special_test = false)
{
	MU_drive_forward(-cm, special_test);
}

bool MU_drive_forward(const short &cm, bool special_test = false)
{
	ResetRotationCount(GLOBAL_MOTOR12);
	Event_setEvent(GLOBAL_EVENT_MU_READING);
	
	unsigned int dig0_here = SU_Values.iCurrentDeg;	// holt sich erstmal den Referenzwert in °, damit ich weiß, ob ich mich gedreht hab
	long degree = cm * (MU_GLOBAL_DRIVE1);	// den fehler von 1/3 grad braucht man hier nicht betrachten, da ich auf eine strecke von 2,5m eine abweichung von knapp 7° hab und das 3mm entspricht -> so genau lässt sich eh nicht regeln	
	long help_degree = degree;
	short counter = 0;
	short speed = 0;
	
	if(special_test == true)
	{
		while(true)	
		{	
			counter++;
			RotateMotorEx(GLOBAL_MOTOR12,10,MU_GLOBAL_DEGREE_ONESTEP,0,false,false);
			if((counter%2) == 0)
			{
				unsigned int dig0_now = SU_Values.iCurrentDeg;
				short diff = dig0_here - dig0_now;
				while(diff != 0)
				{
					if(diff < 0)
						RotateMotorEx(GLOBAL_MOTOR2,10,-(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
					else
						RotateMotorEx(GLOBAL_MOTOR1,10,(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
					dig0_now = SU_Values.iCurrentDeg;
					diff = dig0_here - dig0_now;				
				}
			}
			// if(something)
			//    schmeiß event und brich while ab
			// 	  funktion wird automatisch beendet
		}
		return true;
	}
	
	
	bool testing_StopandGo;
	short degree_tostart = MU_GLOBAL_STOPandGO;
	short help = degree_tostart;
	
	
	if((degree - (2*MU_GLOBAL_STOPandGO)) > 0 )	// erstmal testen, ob mir der weg zum beschleunigen und normal bremsen reicht
	{
		degree = degree - (2*MU_GLOBAL_STOPandGO);	// erstmal die grad anpassen, die ich mit maximalgeschwindigkeit geradeausfahre
		testing_StopandGo = true;
	}
	else     	// wenn der weg nicht reicht(jetzt kleiner als 800°), dann nehm ich mir genauso viel zeit zum beschleunigen wie zum stoppen
	{
		testing_StopandGo = false;
		degree_tostart = degree/2;
	}
	
	counter = 0;
	while(true)	// beschleunigung
	{	
		counter++;
		if(degree_tostart > MU_GLOBAL_DEGREE_ONESTEP)
		{
			RotateMotorEx(GLOBAL_MOTOR12,speed,MU_GLOBAL_DEGREE_ONESTEP,0,false,false);
			speed += MU_lokal_Beschleunigung;
			degree_tostart -= MU_GLOBAL_DEGREE_ONESTEP;
			if(speed == MU_GLOBAL_MAXSPEED)	// ausstiegsbedingung vorsichtshalber,sollte der beschleunigungswinkel nochmal geändert werden
			{
				RotateMotorEx(GLOBAL_MOTOR12,speed,degree_tostart,0,false,false);
				break;
			}
		}
		else
		{
			RotateMotorEx(GLOBAL_MOTOR12,speed,degree_tostart,0,false,false);	// um die restlichen Grad ausgleichen
		}
		if((counter%2) == 0)		// ausgleichsbedingungen, damit ich änderungen in der beschleunigung weg habe
		{
			unsigned int dig0_now = SU_Values.iCurrentDeg;
			short diff = dig0_here - dig0_now;
			while(diff != 0)
			{
				if(diff < 0)
					RotateMotorEx(GLOBAL_MOTOR2,speed,-(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
				else
					RotateMotorEx(GLOBAL_MOTOR1,speed,(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
				dig0_now = SU_Values.iCurrentDeg;
				diff = dig0_here - dig0_now;				
			}
		}	
	}
	
	counter = 0;
	while((degree > MU_GLOBAL_STOPandGO) && (testing_StopandGo == true))	// ich fahre solange mit maximalGeschwindigkeit, solange ich nicht bremsen oder anfahren muss
	{	
		counter++;
		RotateMotorEx(GLOBAL_MOTOR12,MU_GLOBAL_MAXSPEED,MU_GLOBAL_DEGREE_ONESTEP,0,false,false);
		degree -= MU_GLOBAL_DEGREE_ONESTEP;
		if((counter%2) == 0)
		{
			unsigned int dig0_now = SU_Values.iCurrentDeg;
			short diff = dig0_here - dig0_now;
			while(diff != 0)
			{
				if(diff < 0)
					RotateMotorEx(GLOBAL_MOTOR2,speed,-(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
				else
					RotateMotorEx(GLOBAL_MOTOR1,speed,(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
				dig0_now = SU_Values.iCurrentDeg;
				diff = dig0_here - dig0_now;				
			}
		}
	}

	degree_tostart = help;
	counter = 0;
	while(true) // bremsung
	{
		counter++;
		if(degree_tostart > MU_GLOBAL_DEGREE_ONESTEP)
		{
			RotateMotorEx(GLOBAL_MOTOR12,speed,MU_GLOBAL_DEGREE_ONESTEP,0,false,false);
			speed -= MU_lokal_Beschleunigung;	
			degree_tostart -= MU_GLOBAL_DEGREE_ONESTEP;
			if(speed == 0)	// ausstiegsbedingung vorsichtshalber,sollte der beschleunigungswinkel nochmal geändert werden
			{
				Off(GLOBAL_MOTOR12);
				break;
			}
		}
		else
		{
			RotateMotorEx(GLOBAL_MOTOR12,speed,degree_tostart,0,false,false);	// um die restlichen Grad ausgleichen
			Off(GLOBAL_MOTOR12);
		}
		if((counter%2) == 0)		// ausgleichsbedingungen, damit ich änderungen in der beschleunigung weg habe
		{
			unsigned int dig0_now = SU_Values.iCurrentDeg;
			short diff = dig0_here - dig0_now;
			while(diff != 0)
			{
				if(diff < 0)
					RotateMotorEx(GLOBAL_MOTOR2,speed,(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
				else
					RotateMotorEx(GLOBAL_MOTOR1,speed,(diff*MU_GLOBAL_FEHLERKORREKTUR),0,false,false);
				dig0_now = SU_Values.iCurrentDeg;
				diff = dig0_here - dig0_now;				
			}
		}
	}
	
	// so und hier zum schluss schau ich nochmal, inwieweit ich von den anfang berechneten zu fahrenden grad abweiche und zieh diese differenz nochmal nach
	Wait(20);	// um alle Dinge aktualisieren zu lassen...
	short corr_1 = MotorTachoCount(GLOBAL_MOTOR1) - help_degree;
	short corr_2 = MotorTachoCount(GLOBAL_MOTOR2) - help_degree;
	RotateMotor(GLOBAL_MOTOR1,10,corr_1);
	RotateMotor(GLOBAL_MOTOR1,10,corr_2);
#ifdef debug
	TextOut(1,LCD_LINE3,"Fehler1 2");
	NumOut(1,LCD_LINE4,corr_1);
	NumOut(9,LCD_LINE4,corr_2);
#endif debug
	
	Wait(10);
	Event_clearEvent(GLOBAL_EVENT_MU_READING);
}

bool MU_start_all_features()
{
	global_someth_exist = false;
	global_Dig0 = SU_Values.iCurrentDeg;
	
	MU_data_info.MU_x_pos = MU_GLOBAL_X_0;
	MU_data_info.MU_y_pos = MU_GLOBLAL_Y_0;
	MU_data_info.MU_angle = MU_GLOBAL_ANGLE_0;
	MU_data_info.MU_sin_angle = 0;
	MU_data_info.MU_distance = 0;
	
#ifdef MU_feedback
	PlayTone(100,50);
#endif MU_feedback
	
	StartTask(MU_informations);
	
}

task MU_informations()
{
#ifdef MU_feedback
	PlayTone(1000,50);
#endif MU_feedback
	while(true)
	{
		MU_data_info.MU_angle = (SU_Values.iCurrentDeg - global_Dig0);
		if(MU_data_info.MU_angle < 0)
		{
			MU_data_info.MU_angle += 360;	// somit habe ich immer einen positiven Winkel bezogen auf die Karte
#ifdef debug
			TextOut(1,LCD_LINE1,"Winkel im Raum");
			NumOut(1,LCD_LINE2, MU_data_info.MU_angle);
#endif debug
		}
		if(Event_eventIsPresent(GLOBAL_EVENT_MU_READING))
		{
			int pos_changing = ((MotorTachoCount(GLOBAL_MOTOR1) + MotorTachoCount(GLOBAL_MOTOR2)) / 2);	
			int help = pos_changing % 2;	// liefert mir den Rest zurück, den ich mich noch im Feld befinde in °
			pos_changing /= MU_GLOBAL_WHEEL;	// liefert mir die Veränderung in der entsprechenden Richtung zurück
			
			// TODO: entfernung und angle dazwischen jeweils ausrechnen, falls benötigt
			if(MU_data_info.MU_angle == 90)	// wenn der Roboter nach links schaut(auf der Karte)
			{
				MU_data_info.MU_x_pos -= pos_changing;
			}
			else if(MU_data_info.MU_angle == 180)	// wenn der Roboter nach oben schaut(auf der Karte)
			{
				MU_data_info.MU_y_pos -= pos_changing;
			}
			else if(MU_data_info.MU_angle == 270)	// wenn der Roboter auf der Karte nach rechts schaut
			{
				MU_data_info.MU_x_pos += pos_changing;
			}
			else if(MU_data_info.MU_angle == 0)	// wenn der Roboter, wie initial bestimmt, nach unten schaut
			{
				MU_data_info.MU_y_pos += pos_changing;
			}
			else            			// wenn der Roboter in keinem der angepassten Winkel steht, dann muss ich in einen entsprechenden Winkel reinfahren und dann nochmal anfangen
			{
				// else fall noch ausprogrammieren
			}
		}

	}

}

#ifdef debug
task main()
{

}
#endif debug

#endif ___MOTORMODULE___
